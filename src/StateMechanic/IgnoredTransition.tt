<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace StateMechanic
{
<# Create(false); #>

<# Create(true); #>
}

<#+
public void Create(bool hasEventData)
{
    if (hasEventData)
    {
#>
    internal class IgnoredTransition<TState, TEventData> : IInvokableTransition<TEventData>
<#+
    }
    else
    {
#>
    internal class IgnoredTransition<TState> : IInvokableTransition  
<#+
    }
#>
        where TState : StateBase<TState>, new()
    {
        private readonly ITransitionDelegate<TState> transitionDelegate;
        private readonly TState fromState;
        private readonly IEvent @event;

        bool ITransition.WillAlwaysOccur => true;

        public IgnoredTransition(TState fromState, IEvent @event, ITransitionDelegate<TState> transitionDelegate)
        {
            this.transitionDelegate = transitionDelegate;
            this.fromState = fromState;
            this.@event = @event;
        }

        public bool TryInvoke(<#= hasEventData ? "TEventData eventData, " : "" #>EventFireMethod eventFireMethod)
        {
            this.transitionDelegate.IgnoreTransition(this.fromState, this.@event, eventFireMethod);
            return true;
        }

        public override string ToString()
        {
            return $"<IgnoredTransition Event={this.@event}>";
        }
    }
<#+
}
#>