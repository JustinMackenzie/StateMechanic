<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace StateMechanic
{
<# Create(false); #>

<# Create(true); #>
}

<#+
private void Create(bool hasEventData)
{
    string eventType = hasEventData ? "Event<TEventData>" : "Event";

#>
    /// <summary>
    /// Contains information on a dynamic transition, passed to the transition's state selector
    /// </summary>
    /// <typeparam name="TState">Type of state</typeparam>
<#+
    if (hasEventData)
    {
#>
    /// <typeparam name="TEventData">Type of event data</typeparam>
    public class DynamicSelectorInfo<TState, TEventData>
<#+
    }
    else
    {
#>
    public class DynamicSelectorInfo<TState>
<#+
    }
#>
    {
        /// <summary>
        /// Gets the state this transition is from
        /// </summary>
        public TState From { get; }

        /// <summary>
        /// Gets the event which triggered this transition
        /// </summary>
        public <#= eventType #> Event { get; }

<#+
        if (hasEventData)
        {
#>
        /// <summary>
        /// Gets the event data which was passed when the event was fired
        /// </summary>
        public TEventData EventData { get; }
<#+
        }
#>

        internal DynamicSelectorInfo(TState from, <#= eventType #> @event<#= hasEventData ? ", TEventData eventData" : "" #>)
        {
            this.From = from;
            this.Event = @event;
<#+
            if (hasEventData)
            {
#>
            this.EventData = eventData;
<#+
            }
#>
        }
        
        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns> A string that represents the current object.</returns>
        [ExcludeFromCoverage]
        public override string ToString()
        {
            return $"<DynamicSelectorInfo From={this.From} Event={this.Event}<#= hasEventData ? " EventData={this.EventData}" : "" #>>";
        }
    }
<#+
}
#>