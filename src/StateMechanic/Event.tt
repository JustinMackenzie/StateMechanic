<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;

namespace StateMechanic
{
<# Create(false); #>

<# Create(true); #>
}

<#+
private void Create(bool hasEventData)
{
    string iinvokableTransitionType = hasEventData ? "IInvokableTransition<TEventData>" : "IInvokableTransition";

    if (hasEventData)
    {
#>
    /// <summary>
    /// An event, which can be fired with some event data to trigger a transition from one state to antoher
    /// </summary>
    /// <typeparam name="TEventData">Type of event data which will be provided when the event is fired</typeparam>
    public class Event<TEventData> : IEvent
<#+
    }
    else
    {
#>
    /// <summary>
    /// An event, which can be fired to trigger a transition from one state to antoher
    /// </summary>
    public class Event : IEvent
<#+
    }
#>
    {
        private readonly Dictionary<IState, OptimizingList<<#= iinvokableTransitionType #>>> transitions = new Dictionary<IState, OptimizingList<<#= iinvokableTransitionType #>>>();
        private IEventDelegate parentStateMachine;

        /// <summary>
        /// Gets the name assigned to this event
        /// </summary>
        public string Name { get; }

        /// <summary>
        /// Initialises a new instance of the <see cref="<#= hasEventData ? "Event{TEventData}" : "Event" #>"/> class
        /// </summary>
        /// <param name="name">Name assigned to the evnet</param>
        public Event(string name = null)
        {
            this.Name = name;
        }

        internal void AddTransition(IState state, <#= iinvokableTransitionType #> transition, IEventDelegate parentStateMachine)
        {
            this.SetParentStateMachine(parentStateMachine, state);

            OptimizingList<<#= iinvokableTransitionType #>> transitions;
            if (!this.transitions.TryGetValue(state, out transitions))
            {
                transitions = new OptimizingList<<#= iinvokableTransitionType #>>();
            }

            var firstThatWillAlwaysOccur = transitions.FirstOrDefault(x => x.WillAlwaysOccur);
            if (firstThatWillAlwaysOccur != null)
                throw new ArgumentException($"{transition} will never occur from {state}: {firstThatWillAlwaysOccur} was added first, and will always happen");

            transitions.Add(transition);
            this.transitions[state] = transitions;
        }

        private void SetParentStateMachine(IEventDelegate parentStateMachine, IState state)
        {
            if (this.parentStateMachine != null && this.parentStateMachine != parentStateMachine)
                throw new InvalidEventTransitionException(state, this);

            this.parentStateMachine = parentStateMachine;
        }

        internal IEnumerable<<#= iinvokableTransitionType #>> GetTransitionsFromState(IState state)
        {
            OptimizingList<<#= iinvokableTransitionType #>> transitions;
            if (!this.transitions.TryGetValue(state, out transitions))
                return Enumerable.Empty<<#= iinvokableTransitionType #>>();

            return transitions.GetEnumerable();
        }

        /// <summary>
        /// Attempt to fire this event, returning false if a transition on this event could not be found on the parent state machine's current state
        /// </summary>
        /// <remarks>
        /// No exception will be thrown if no transition on this event could not be found on the parent state machine's current state
        /// 
        /// NOTE! If fired from within a transition handler or entry/exit handler, this method will always return true.
        /// If the parent state machine has a <see cref="IStateMachineSynchronizer"/>, then the return value of this method may not correctly indicate whether the event was successfully fired
        /// </remarks><#= hasEventData ? "\r\n        /// <param name=\"eventData\">Event data to associate with this event</param>" : "" #>
        /// <returns>True if the event could be fired.</returns>
        public bool TryFire(<#= hasEventData ? "TEventData eventData" : "" #>)
        {
            return this.RequestEventFireFromEvent(<#= hasEventData ? "eventData, " : "" #>EventFireMethod.TryFire);
        }

        /// <summary>
        /// Attempt to fire this event, throwing a <see cref="TransitionNotFoundException"/> if a transition on this event could not be found on the parent state machine's current state
        /// </summary>
        /// <remarks>
        /// NOTE! If fired from within a transition handler or entry/exit hander, this method will never throw an exception.
        /// However, the call to <see cref="Fire(<#= hasEventData ? "TEventData" : "" #>)"/> or <see cref="TryFire(<#= hasEventData ? "TEventData" : "" #>)"/> which originally triggered the outermost
        /// transition may result in an exception being thrown.
        /// 
        /// If the parent state machine has a <see cref="IStateMachineSynchronizer"/>, then exception-throwing behaviour will be determined by that synchronizer.
        /// </remarks><#= hasEventData ? "\r\n        /// <param name=\"eventData\">Event data to associate with this event</param>" : "" #>
        public void Fire(<#= hasEventData ? "TEventData eventData" : "" #>)
        {
            this.RequestEventFireFromEvent(<#= hasEventData ? "eventData, " : "" #>EventFireMethod.Fire);
        }

<#+
        if (hasEventData)
        {
#>
        void IEvent.Fire()
        {
            this.Fire(default(TEventData));
        }

        bool IEvent.TryFire()
        {
            return this.TryFire(default(TEventData));
        }
<#+
        }
#>

        private bool RequestEventFireFromEvent(<#= hasEventData ? "TEventData eventData, " : "" #>EventFireMethod eventFireMethod)
        {
            if (this.parentStateMachine == null)
            {
<#+
                if (hasEventData)
                {
#>
                if (eventFireMethod == EventFireMethod.Fire)
                    throw new InvalidEventSetupException(this);
                else
                    return false;
<#+
                }
                else
                {
#>
                throw new InvalidEventSetupException(this);
<#+
                }
#>
            }

            return this.parentStateMachine.RequestEventFireFromEvent(this, <#= hasEventData ? "eventData, " : "" #>eventFireMethod);
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns>A string that represents the current object</returns>
        [ExcludeFromCoverage]
        public override string ToString()
        {
            return $"<Event Name={this.Name ?? "(unnamed)"}>";
        }
    }   
<#+
}
#>