<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace StateMechanic
{
<# Create(false); #>

<# Create(true); #>
}

<#+
private void Create(bool hasEventData)
{
    string eventTransitionInvokerType = hasEventData ? "EventTransitionInvoker<TState, TEventData>" : "EventTransitionInvoker<TState>";
    string eventType = hasEventData ? "Event<TEventData>" : "Event";

#>
    internal struct <#= eventTransitionInvokerType #> : ITransitionInvoker<TState>
        where TState : StateBase<TState>, new()
    {
        private readonly ITransitionDelegate<TState> transitionDelegate;
        private readonly <#= eventType #> @event;
<#+
        if (hasEventData)
        {
#>
        private readonly TEventData eventData;
<#+
        }
#>
        
        public EventFireMethod EventFireMethod { get; }
		public int EventFireMethodInt => (int)this.EventFireMethod;
        public IEvent Event => this.@event;

        public EventTransitionInvoker(<#= eventType #> @event, EventFireMethod eventFireMethod, <#= hasEventData ? "TEventData eventData, " : "" #>ITransitionDelegate<TState> transitionDelegate)
        {
            this.@event = @event;
            this.EventFireMethod = eventFireMethod;
            this.transitionDelegate = transitionDelegate;
<#+
            if (hasEventData)
            {
#>
            this.eventData = eventData;
<#+
            }
#>
        }

        public bool TryInvoke(TState sourceState)
        {
            var customTo = sourceState.HandleEvent(this.Event, <#= hasEventData ? "this.eventData" : "null" #>);
            if (customTo != null)
            {
                var invoker = new ForcedTransitionInvoker<TState>(customTo, this.Event, <#= hasEventData ? "this.eventData" : "null" #>, this.transitionDelegate);
                // This shouldn't fail
                bool success = invoker.TryInvoke(sourceState);
                Trace.Assert(success, "Forced transition did not succeed");
                return true;
            }

            foreach (var transition in this.@event.GetTransitionsFromState(sourceState))
            {
                if (transition.TryInvoke(<#= hasEventData ? "this.eventData, " : "" #>this.EventFireMethod))
                    return true;
            }

            return false;
        }
    }
<#+
}
#>